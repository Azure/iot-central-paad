trigger:
  - develop
pool:
  vmImage: 'macos-latest'

variables:
  - group: iotc-paad-android
  - name: PAAD_BETARELEASE_PROJECT_NAME
    value: $(Project_Name)
  - name: PAAD_BETARELEASE_VERSION_CODE
    value: 0
  - name: PAAD_BETARELEASE_VERSION_NAME
    value: 1.0.2

name: $(Date:yyyyMMdd)$(Rev:.r)
jobs:
- job: Android
  variables:
    apkPath: android/app/build/outputs/apk
    releaseApk: $(apkPath)/release/$(Project_Name)-release.apk
    releaseZip: $(apkPath)/release/$(Project_Name)-release.zip
    signedExtractedPath: $(apkPath)/signed
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '12.18.4'
    displayName: 'Install Node'

  - script: npm install
    workingDirectory: .
    displayName: 'Install node dependencies'

  - task: DownloadSecureFile@1
    name: androidKeystore
    inputs:
      secureFile: paad-release.keystore

  - bash: |
      PAAD_RELEASE_VERSION_CODE=$(echo $(Build.BuildNumber) | sed 's/\.//')
      echo "##vso[task.setvariable variable=PAAD_RELEASE_VERSION_CODE]$PAAD_RELEASE_VERSION_CODE"
      echo "Using variable: $GOOGLE_MAPS_API_KEY"
      echo "##vso[task.setvariable variable=GOOGLE_MAPS_API_KEY]$GOOGLE_MAPS_KEY"
      cp $(androidKeystore.secureFilePath) android/app/$PAAD_BETARELEASE_STORE_FILE
      ls -l android/app/$PAAD_BETARELEASE_STORE_FILE
    env:
      GOOGLE_MAPS_KEY: $(googlemapskey)

  - bash: env | sort

  - task: Gradle@2
    inputs:
      workingDirectory: 'android'
      gradleWrapperFile: 'android/gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'assembleRelease'

  - task: ArchiveFiles@2
    displayName: 'Create zip for signing'
    inputs:
      rootFolderOrFile: '$(releaseApk)'
      includeRootFolder: false
      archiveFile: '$(releaseZip)'

  - task: EsrpCodeSigning@1
    displayName: 'Sign build'
    inputs:
      ConnectedServiceName: 'IoT PnP PaaD'
      FolderPath: '$(apkPath)/release'
      Pattern: '*.zip'
      signConfigType: 'inlineSignParams'
      inlineOperation: |
        [
              {
                  "KeyCode" : "CP-464774-Java",
                  "OperationCode" : "AndroidSign",
                  "Parameters" : {},
                  "ToolName" : "sign",
                  "ToolVersion" : "1.0"
              }
        ]
      SessionTimeout: '60'
      MaxConcurrency: '50'
      MaxRetryAttempts: '5'

  - task: ExtractFiles@1
    displayName: 'Extract signed build'
    inputs:
      archiveFilePatterns: '$(releaseZip)'
      destinationFolder: '$(signedExtractedPath)'

  - task: PublishBuildArtifacts@1
    displayName: "Publish Build Artifact"
    inputs:
      PathtoPublish: '$(signedExtractedPath)'
      ArtifactName: 'android'
      publishLocation: 'Container'

# - job: iOS
#   timeoutInMinutes: 120
#   variables:
#     rootPath: '$(System.DefaultWorkingDirectory)'
#     patchScript: '$(rootPath)/patchIpa.sh'
#     archivePath: '$(rootPath)/output/archive'
#     xcodeDeveloperDir: '/Applications/Xcode_$(Xcode_Version).app/Contents/Developer'
#     xcarchivePath: '$(archivePath)/$(Project_Name).xcarchive'
#     exportPath: '$(rootPath)/output/package'
#     resultIpa: '$(exportPath)/$(Project_Name).ipa'
#   steps:
#   - task: NodeTool@0
#     inputs:
#       versionSpec: '12.18.4'
#     displayName: 'Install Node'

#   - script: npm install
#     workingDirectory: .
#     displayName: 'Install node dependencies'

#   - script: npm version prerelease --preid "$(Build.BuildNumber)" --no-git-tag-version
#     workingDirectory: .
#     displayName: 'Increment version in package.json'


#   - task: InstallAppleCertificate@2
#     displayName: "Install Apple Certificate"
#     inputs:
#       certSecureFile: '$(AppCenter_Dogfood_Certificate_Name)'
#       certPwd: '$(AppCenter_Dogfood_Certificate_Password)'

#   - task: InstallAppleProvisioningProfile@1
#     displayName: "Install Apple provisioning profile"
#     inputs:
#       provisioningProfileLocation: 'secureFiles'
#       provProfileSecureFile: '$(AppCenter_Dogfood_Provisioning_Profile)'

#   - task: ShellScript@2
#     inputs:
#       scriptPath: '$(rootPath)/bumpVersion.sh'

#   - task: Xcode@5
#     displayName: "Build Mobile Application"
#     inputs:
#       actions: 'build'
#       configuration: 'Release'
#       xcWorkspacePath: '$(rootPath)/ios/$(Project_Name).xcworkspace'
#       scheme: '$(Project_Name)'
#       sdk: 'iphoneos14.4'
#       packageApp: true
#       exportPath: '$(exportPath)'
#       archivePath: '$(archivePath)'
#       signingOption: 'manual'
#       signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
#       provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'
#       xcodeVersion: 'specifyPath'
#       xcodeDeveloperDir: '$(xcodeDeveloperDir)'

#   - task: PublishBuildArtifacts@1
#     displayName: "Publish Build Artifact"
#     inputs:
#       PathtoPublish: '$(resultIpa)'
#       ArtifactName: 'ios'
#       publishLocation: 'Container'

- job: ReleaseFile
  dependsOn:
  - Android
  # - iOS
  steps:
  - task: ShellScript@2
    inputs:
      scriptPath: '$(System.DefaultWorkingDirectory)/createReleaseFile.sh'
    
  - task: PublishBuildArtifacts@1
    displayName: "Publish Build Artifact"
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/CHANGELOG.md'
      ArtifactName: 'changelog'
      publishLocation: 'Container'